{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dev\\\\Desktop\\\\React\\\\my-app10\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\"); // const nameInputRef = useRef();\n  // const [enteredNameIsValid, setenteredNameIsValid] = useState(false);\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid) {\n    setFormIsValid(true);\n  } // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  //   // if (event.target.value.trim() !== \"\") {\n  //   //   setenteredNameIsValid(true);\n  //   //   return;\n  //   // }\n  // };\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  //   // if (enteredName.trim() === \"\") {\n  //   //   setenteredNameIsValid(false);\n  //   //   return;\n  //   // }\n  // };\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    } // if (enteredName.trim() === \"\") {\n    //   setenteredNameIsValid(false);\n    //   return;\n    // }\n    // setenteredNameIsValid(true);\n\n\n    console.log(enteredName); // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n    // nameInputRef.current.value = \"\"; // Not the Ideal condition to do we should not manupulate the DOM\n    // setEnteredName(\"\");\n    // setEnteredNameTouched(false);\n\n    resetNameInput();\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must no be Empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"iRUT25x8SoL/6HqmpsJU1qPR3wc=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useEffect","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","formIsValid","setFormIsValid","formSubmissionHandler","event","preventDefault","console","log","nameInputClasses"],"sources":["C:/Users/Dev/Desktop/React/my-app10/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n  // const nameInputRef = useRef();\n  // const [enteredNameIsValid, setenteredNameIsValid] = useState(false);\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid) {\n    setFormIsValid(true);\n  }\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n\n  //   // if (event.target.value.trim() !== \"\") {\n  //   //   setenteredNameIsValid(true);\n  //   //   return;\n  //   // }\n  // };\n\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n\n  //   // if (enteredName.trim() === \"\") {\n  //   //   setenteredNameIsValid(false);\n  //   //   return;\n  //   // }\n  // };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    // setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    // if (enteredName.trim() === \"\") {\n    //   setenteredNameIsValid(false);\n    //   return;\n    // }\n    // setenteredNameIsValid(true);\n\n    console.log(enteredName);\n\n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    // nameInputRef.current.value = \"\"; // Not the Ideal condition to do we should not manupulate the DOM\n    // setEnteredName(\"\");\n    // setEnteredNameTouched(false);\n    resetNameInput();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n      </div>\n      {nameInputHasError && <p className=\"error-text\">Name must no be Empty</p>}\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,oBAArB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM;IACJC,KAAK,EAAEC,WADH;IAEJC,OAAO,EAAEC,kBAFL;IAGJC,QAAQ,EAAEC,iBAHN;IAIJC,kBAAkB,EAAEC,iBAJhB;IAKJC,gBAAgB,EAAEC,eALd;IAMJC,KAAK,EAAEC;EANH,IAOFd,QAAQ,CAAEG,KAAD,IAAWA,KAAK,CAACY,IAAN,OAAiB,EAA7B,CAPZ,CAD6B,CAS7B;EACA;;EAEA,IAAIC,WAAW,GAAG,KAAlB;;EAEA,IAAIV,kBAAJ,EAAwB;IACtBW,cAAc,CAAC,IAAD,CAAd;EACD,CAhB4B,CAkB7B;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;;;EAEA,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;IACvCA,KAAK,CAACC,cAAN,GADuC,CAGvC;;IAEA,IAAI,CAACd,kBAAL,EAAyB;MACvB;IACD,CAPsC,CASvC;IACA;IACA;IACA;IACA;;;IAEAe,OAAO,CAACC,GAAR,CAAYlB,WAAZ,EAfuC,CAiBvC;IACA;IAEA;IACA;IACA;;IACAU,cAAc;EACf,CAxBD;;EA0BA,MAAMS,gBAAgB,GAAGf,iBAAiB,GACtC,sBADsC,GAEtC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEU,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEK,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE;QACA,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAEb,iBAJZ;QAKE,MAAM,EAAEE,eALV;QAME,KAAK,EAAER;MANT;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAYGI,iBAAiB,iBAAI;MAAG,SAAS,EAAC,YAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAZxB,eAaE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,QAAQ,EAAE,CAACQ,WAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CArFD;;GAAMf,W;UAQAD,Q;;;KARAC,W;AAuFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}